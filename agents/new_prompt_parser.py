from langchain_openai import ChatOpenAI
import os
import json

def newPromptJsonSpec(original_prompt: str, update_prompt: str, previous_json: json):
    llm = ChatOpenAI(model="gpt-4", api_key=os.getenv("OPENAI_API_KEY"))

    prompt = f"""
        You are a full-stack architecture assistant. Your task is to **intelligently update** an existing full-stack JSON spec based on a new user request.

        ---

        üîπ ORIGINAL USER PROMPT:
        {original_prompt}

        üîπ PREVIOUSLY GENERATED JSON SPEC:
        {previous_json}

        üîπ NEW USER UPDATE REQUEST:
        {update_prompt}

        ---

        üõ†Ô∏è OBJECTIVE:
        Update the existing spec by **only applying necessary changes**. Do not regenerate everything. Maintain all prior structure, paths, and values unless specifically altered.

        ---

        üîç UPDATE RULES:

        1. üîÅ **Preserve existing values** from `previous_json`, including:
        - `file_path`
        - `description`
        - `auth_required`
        - `uses_api`, etc.

        2. ‚ûï **When adding** new:
        - Pages/components ‚Üí set `file_path` using the same directory and naming scheme as previous ones.
        - Models ‚Üí place new model definitions in `models`, update `backend.entities`, and link to `frontend.required_models` if used.
        - API endpoints ‚Üí ensure each one maps to components using it (`uses_api`) and appears in `backend.list_of_api_endpoints`.

        3. ‚ûñ **When removing**, explicitly delete the mentioned components, models, or routes.

        4. üîÑ **Maintain consistency**:
        - `frontend.required_models` must match `models`
        - Every `uses_api.path` must exist in `backend.list_of_api_endpoints`
        - `authentication.user_fields` must exist in the User model
        - Reuse `file_path` or set a new one using existing patterns

        ---

        üì¶ OUTPUT FORMAT (STRICT JSON ‚Äî NO COMMENTS):
        {{
        "frontend": {{ ... }},
        "models": [ ... ],
        "backend": {{ ... }}
        }}

        Strict Rule
        - Only Give the JSON for the required changes Do not give the already specificed JSON. 
        - According to the Model and backend also specified.
        - Make sure Everything should be define Smooth.
        - The new Json is generated by you that will be define the required for with the perspective of the frontend, backend, Database all.

        Now return the **updated spec**: JSON ONLY. No explanation, no markdown.
        """


    response = llm.invoke(prompt)

    try:
        raw = response.content.strip()

        if raw.startswith("```json"):
            raw = raw.removeprefix("```json").removesuffix("```").strip()
        elif raw.startswith("```"):
            raw = raw.removeprefix("```").removesuffix("```").strip()

        return json.loads(raw)
    except Exception as e:
        raise ValueError(f"Failed to parse backend JSON: {str(e)}\nRaw output:\n{raw}")
